
// File: src/lib/supabase-unified.js
// Generated by execute-consolidation.mjs

import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  import.meta.env.VITE_SUPABASE_URL,
  import.meta.env.VITE_SUPABASE_ANON_KEY
);

// Get unified mosque data
export const getMosques = async (limit = 50, offset = 0, searchQuery = '') => {
  let query = supabase
    .from('mosques')
    .select('*')
    .range(offset, offset + limit - 1)
    .order('created_at', { ascending: false });
  
  if (searchQuery) {
    query = query.or(`name.ilike.%${searchQuery}%,address.ilike.%${searchQuery}%,city.ilike.%${searchQuery}%`);
  }
  
  const { data, error } = await query;
  
  if (error) {
    console.error('Error fetching mosques:', error);
    throw error;
  }
  
  return data || [];
};

// Get unified business data
export const getBusinesses = async (limit = 50, offset = 0, searchQuery = '') => {
  let query = supabase
    .from('businesses')
    .select('*')
    .range(offset, offset + limit - 1)
    .order('created_at', { ascending: false });
  
  if (searchQuery) {
    query = query.or(`name.ilike.%${searchQuery}%,business_name.ilike.%${searchQuery}%,address.ilike.%${searchQuery}%,city.ilike.%${searchQuery}%`);
  }
  
  const { data, error } = await query;
  
  if (error) {
    console.error('Error fetching businesses:', error);
    throw error;
  }
  
  return data || [];
};

// Search across all unified data
export const searchAllEntities = async (searchQuery, limit = 100) => {
  const [mosques, businesses] = await Promise.all([
    getMosques(Math.ceil(limit * 0.7), 0, searchQuery),
    getBusinesses(Math.ceil(limit * 0.3), 0, searchQuery)
  ]);
  
  return {
    mosques,
    businesses,
    total: mosques.length + businesses.length,
    totalRecords: {
      mosques: mosques.length,
      businesses: businesses.length,
      combined: mosques.length + businesses.length
    }
  };
};

// Get total counts
export const getTotalCounts = async () => {
  const [mosqueCount, businessCount] = await Promise.all([
    supabase.from('mosques').select('*', { count: 'exact', head: true }),
    supabase.from('businesses').select('*', { count: 'exact', head: true })
  ]);
  
  return {
    mosques: mosqueCount.count || 0,
    businesses: businessCount.count || 0,
    total: (mosqueCount.count || 0) + (businessCount.count || 0)
  };
};

export default supabase;
